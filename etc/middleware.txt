~~~~~~~~~~~~

    미들웨어가 뭐냐?

    req -----> server -----> controller() -----> DB

    위 flow를 좀 설명하자면 아래와 같다.
    유저로부터 어떠한 요청이 있을때, 기존 nodejs에서는 그러한 요청들이 서버로 전달되고,
    서버는 요청을 처리해줄 수 있는 기능을 가진 함수들이 있는 컨트롤러에게 그 요청을 보낸다.
    컨트롤러에서는 요청에 맞게 DB에 접근해 이런저런 요청들을 처리하게 되는데,
    만약 로그인이나 그 외 인증이 필요한 요청들이 있을땐, flow가 아래와 같이 된다.

    req -----> server -----> log() -----> auth() -----> controller() -----> DB

    위 flow를 다시 설명하자면 서버에서부터 요청이 컨트롤러로 전달되기 전,
    우선 어떠한 요청인지 확인할 수 있는 로그함수가 먼저 있을 수 있고,
    요청을 확인했으면 그에 맞게 인증을 먼저 해줄 수 있는 어뜨함수가 또 있을 수 있고,
    이러한 인증이 먼저 확인되었을때 마지막으로 어뜨로 요청을 전달하게 된다.
    위 파트에서 log() -----> auth() 이 두가지 함수를 미들웨어라고 한다.
    they are the software in the middle이라고 해서 middleware라고 한다.
    처음 유저가 보낸 요청과 그 요청이 당도할 최종 종착지 중간에 있는 함수가 미들웨어라고 보면 된다.

    구글 검색시 미들웨어에 대해선 이렇게 설명되어 있다.
    
    "미들웨어는 운영 체제에서 제공하지 않는 일반적인 서비스와 기능을 애플리케이션에 제공하는 소프트웨어입니다. 데이터 관리, 애플리케이션 서비스, 메시징, 인증 및 API 관리는 주로 미들웨어를 통해 처리됩니다."

    그렇다면 이 미들웨어를 왜 다시 한 번 짚고 넘어가냐??

    nodejs에서는 위와같은 방식으로 미들웨어를 사용했었지만,
    지금 배우고있는 NextJS에서는 serverless라 서버가 없기때문에 서버파일도 없어서 위와같은 방식으로 미들웨어를 사용할 수가 없기 때문이다.

    지금 배우고있는 캐럿마켓에서는 이러한 인증 부분을 하기 위해 useUser()라는 훅을 만들어 libs에 두고 필요할때마다 가져다 쓰고있지만,
    만약 우리가 만드는 캐럿마켓의 페이지를 보호하고싶다면, 모든 페이지에서 이 useUser()라는 훅을 적용시켜야 한다.

    미들웨어는 위와같은 상황에 도움이 될 수 있다.

~~~~~~~~~~~~
