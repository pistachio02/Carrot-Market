~~~~~~~~~~~~

    이곳에서는 getStaticProps를 사용하면서 동시에 어떻게 최신의 상태를 유저에게 보여줄 수 있는지를 배울 수 있다.

    이전에 배웠던대로 getStaticProps를 사용하게 되면 NextJS에서 우리가 만든 코드들을 전부 최초 1번만 html코드로 변환시키고 그것을 브라우저를 통해 유저에게 보여주게 된다고 했는데,

    이렇게 했을때의 문제는 물론 어떠한 페이지를 유저가 로딩이나 오래걸림 없이 바로 볼 수 있다는 장점이 있겠지만(필요한 모든 데이터를 전부 한꺼번에 얻어와서 빌드 시 html로 만들어 나타내기 때문), 그 이후 유저가 새로운 글을 작성하거나 무언가 데이터에 변화가 생길 경우 그러한 최신의 정보를 반영할 수 없다는 문제가 생긴다. 왜냐하면 아까도 말했듯 최초 빌드시 미리 필요한 모든 데이터를 가져와 html로 변환시키기 때문이다.

    그렇다면 어떻게 이러한 문제를 고칠 수 있을까?
    바로 revalidate 옵션을 설정해주면 된다.
    아래 예시를 보면 이해가 더 빠르다.

    /*
        export async function getStaticProps() {
            const posts = await client.post.findMany({ 
                include: { 
                    user: true, 
                    _count: {
                        select: {
                        wonderings: true,
                        answers: true,
                        },
                    },
                }
            });
            return {
                props: {
                    posts: JSON.parse(JSON.stringify(posts)),
                },
                revalidate: 20,
            };
        }
    */
    
    위를 보면 알겠지만 getStaticProps를 사용해 필요한 모든 데이터들을 미리 받아와서 사용하게 되는데, 이 때 저 revalidate: 20 이라는 옵션이 없다면 유저가 데이터에 무언가를 추가하거나 삭제, 업데이트를 시키더라도 유저가 보는 화면에는 변화가 없을것이다.
    
    그치만 저 revalidate: 20 옵션(초단위로본다)을 설정해줌으로서, 유저가 데이터에 변화를 주게 되면 우리가 모르는 사이 백그라운드에서 최초 처음 실행했던 빌드 과정을 다시 거치지 때문에 유저는 새롭게 적용된 화면(html)을 볼 수 있게 되는것이다.

    revalidate: 20 이라는게 단순히 매 20초마다 새롭게 빌드를 해라 라는 뜻이 아니라,
    만약 어떤 유저가 20초 이후게 우리가 만든 페이지에 접속하게 되면,
    그 유저도 처음엔 동일하게 최초 처음 빌드된 오래된 페이지를 보게 되지만,
    유저가 20초 이후에 들어왔음을 자동으로 감지해 새롭게 빌드가 필요하다고 판단해 다시 revalidate을 하게 되는것이다.

    조금 이해하기 어려울 수 있으나 쉽게 설명하자면 단순히 매 20초마다 새로고침이 되는게 아니라 어떠한 유저가 우리 페이지에 접속했고, 그 유저가 우리 페이지에 접속한 시기가 만약 페이지가 가장 마지막으로 빌드 된지 20초 이후라면, 그 때 자동으로 revalidate을 해서 유저에게 새롭게 적용된 화면을 보여주게 되는것이라 생각하면 된다.

~~~~~~~~~~~~
