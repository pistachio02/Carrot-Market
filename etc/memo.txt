~~~~~~~~~~~~

    공부하던 중 메모하고싶은게 생기면 이곳에다가.

~~~~~~~~~~~~

    NextJS에 대해서 배우던 중 Prisma, Planetscale 에 대해서 알게 되었다.
    그 전까진 어떻게 NextJS로 풀스택 앱 개발을 할 수 있을까 궁금했는데 조금은 알게 되었다.
    이전에는 프론트와 백엔드 각각 따로 작성하고 서버도 다른곳에서 실행시켜줬어야 했는데,
    NextJS에서는 그럴 필요 없이 한곳에서 프론트와 백엔드파트를 모두 작성할 수 있는 것 같다.
    더구나 Database 관련 작업들도 이전처럼 직접 DB를 만들어 관리해주던거에 비해 Planetscale을 활용하니까
    훨씬 더 쉽고 간편하게 DB를 만들고 접근하고 관리할 수 있게 된것같다.

    이전부터 어림짐작으로 분명 뭘 하던 훨씬 더 편리하고 강력한 방법이 있겠지 했는데,
    그런 방법들을 하나한 배워가는 것 같다.
    어쨌던 이전에 Tailwind에 대해서 배우는것보다 훨씬 재밌고 진도도 빨리 나가는것같다.
    재밌다.

~~~~~~~~~~~~

    ch3. NextJS로 개발하기 위한 기초 환경설정등을 했다.

    ch4. Tailwind에 관한 기초 지식들에 대해 공부했다.

    ch5. 캐럿마켓 UI를 직접 만들어보면서 Tailwind 관련 연습을 해볼 수 있었다.
    
    ch6. DB관련 타입스크립트, 노드JS ORM인 Prisma와 mysql과 호환되는 서버리스 DB 플랫폼인 Planetscale에 대해 배웠다.

    ch7. Form 유효성 검사를 제공하는 React Hook Form에 대해 배웠다.

    ch8. 리팩토링 부분. 전체적으로 이전 챕터에서 공부했던 폼에 대해서 실제 앱에 적용시키는 방법, 그 외 입력값들을 가지고 실제 백엔드와 요청과 응답을 주고 받는 방법, 그것을 하는 더 나은 방법들에 대해서 배웠고, 그 외에도 전체적으로 코드의 구성 그리고 작은 팁까지도 배웠다. 
        (이 부분은 분명 중요한 부분이고 나중에 어떤 앱을 개발하더라도 꼭 알아야 하는 부분인데 조금 헷갈리는거 같다. 아무래도 어느 특정 한 토픽에 대해 배우는게 아니라 전체적인 뭔가 좀 두루뭉실한게 무언가를 배우는것 같아서 나중에 다시 한번 들어보는게 좋을 것 같다.)
    --기억해야 할것들!
    ㄴ pages/enter.tsx는 프론트, pages/api/users.enter.tsx는 백엔드이다.
    ㄴ 프론트에 있는 enter.tsx에서는 입력값을 받아 그 값을 함수의 인자로 전달해 데이터를 fetch를 하게 되는데, 이러한 fetch를 같은 위치에서 하는게 아니라 libs/client/useMutation.tsx라는 곳에서 실행하게 된다. 좀 더 정확하게 말하자면 fetch 할 수 있게 미리 특정 함수를 만들어 useMutation.tsx에 위치시기고, 그것을 프론트에 있는 enter.tsx에서 불러와서 실질적인 fetch를 진행하는것이다.
    ㄴ 백엔드에 있는 enter.tsx는 프론트로부터 실질적으로 요청을 받아서 응답을 넘겨줘야 하는곳인데, 이곳 역시 같은 위치에서 DB에 접속해 여러가지 작업을 한 뒤 응답으로 넘겨주기보다는, 실질적인 작업을 하는 특정 함수를 libs/server/withHandler.ts라는곳에 만들어두고, 그것을 백엔드의 enter.tsx에서 불러와서 사용을 하는것이다.
    ㄴ 그러니까 정리하자면 프론트에서 입력값을 받아 그 값을 백엔드로 보내 요청을 할때, 입력값을 받는 코드를 작성한 위치와 백엔드로 실질적인 요청을 보내는 코드를 작성한 위치를 따로 분리시켜서 코드를 작성하는것이고, 이는 백엔드도 마찬가지고, 프론트로부터 데이터를 전달받아 DB에 접속해 여러가지 작업을 한 후 응답으로 데이터를 다시 넘겨주는 작업을 할 때, 백엔드에서도 프론트로부터 데이터를 전달받아 DB에 접속해서 여러가지 작업을 하는 코드의 위치와, 그러한 작업을 마친 뒤 응답으로 다시 데이터를 프론트로 넘겨주는 작업을 하는 코드를 작성한 위치를 각각 따로 분리시켜두고 코드를 작성했다고 보면 된다.

    ch9. 인증(Authentication) - 말 그대로 인증하는 부분이었다. 유저가 캐럿마켓에 와서 회원가입을 하거나 로그인을 하려고 할 때 인증이 필요한데, 기존처럼 아이디 비번 이렇게 넣는게 아니라 유저가 원하는대로 이메일주소나 핸드폰번호로 등록하거나 로그인 할 수 있게 만들어봤다. 중요한건 입력해야 하는 정보가 하나뿐이다보니, 인증을 하려고 할 때 비번을 활용할 수 었었는데 그러면 어떻게 하냐? 바로 토큰을 사용했다. 기존에 배웠던 jwt같은 토큰 말고 그냥 단순히 인증을 해줄 수 있는 토큰(번호)을 활용했다. 랜덤번호를 생성해주는 코드를 만들어 유저가 인증 요청을 할 때마다 랜덤 번호를 유저에게 보내주는데 만약 이메일로 인증요청을 하면 해당 토큰을 이메일로, 만약 핸드폰번호로 인증 요청을 하면 해당 토큰을 문자메세지로 보내주도록 코드를 짜봤다. 문자 보낼때 활용한 사이트는 Twilio, 이메일 보낼때 활용한 사이트는 sendGrid 였다. 유저가 토큰정보를 받아 다시 입력란에 토큰번호를 입력하고 제출하면, 우리는 그 토큰을 받아 유효한 토큰인지 확인해주고, 유효하지 않다면 응답으로 404 상태코드를 보내주고, 만약 유효하다면 해당 토큰은 어차피 한번 사용하고 버릴거라 토큰을 지워주고, 유저에게 유저아이디 정보가 담긴 세션을 하나 보내줄텐데, 이전에 말했듯 세션은 어차피 쿠키를 사용하기 때문에 쿠키에 담아 보내줄거다. 그러면 이 보내주는 작업은 어떻게 하느냐? 바로 iron-session을 통해서 한다. 기존처럼 일일이 세션을 만들고 쿠키설정을 한 뒤 쿠키에 담아 응답으로 보내주는 대신 iron-session을 활용하면 훨씬 간단하고 쉽게 세션을 만들어 쿠키에 담아 유저에게(브라우저에게) 보내줄 수 있다. 여기서 하나 기억해야 하는점은 iron-session을 사용할때는 비번을 임의로 지정해줘야 하는데 길이가 적어도 36보다는 길어야 해서 이땐 임의로 비번 만들어주는 사이트인 passwordsgenerator.net을 활용했다. 어쨌던, 이렇게 인증을 해주면 브라우저에 쿠키가 담기고 유저는 로그인 혹은 회원가입을 마친 후 캐럿마켓의 "/"으로 이동을 하게 된다. 다음 챕터에서는 누가 로그인한 상태인지 아닌지 확인하는 과정이 담겨있겠다. 이번 챕터이 연장선이라고 볼 수 있겠다.

    ch10. 허가(인증 / Authorization) SWR (Stale While Revalidate)

    ch11. 캐럿마켓 홈인 상품 판매 목록(상품 리스트, 상품에 있는 좋아요 개수 표시, 상품 관련 자세한 설명, 관련된 상품 리스트 추천 등) 나오는 페이지에 대한 전반적인 작업들.

    ch12. 캐럿마켓에 있는 동네생활(게시글 올리고 댓글 달고 위치 기반 근처에서 작성된 글 목록 불러오기 등) 관련 전반적인 작업들.

    ch13. 프로필 관련 전반적인 작업들.

    ch14. Streams 관련 전반적인 작업들.

    ch15. Cloudflare Images / Direct Creator Upload / 사진 업로드 하는법, 불러오는법, 표시하는법 등등.

    ch16. NextJS Image Component 에 대해서 배움. img 태그를 사용하는게 아니라 NextJS의 이미지 컴포넌트를 사용하면 웹페이지에 이미지가 있을때 자동으로 모든 이미지를 다 로딩해오는게 아니고 유저가 보고있는 화면의 이미지만 우선적으로 가져오고 스크롤을 할수록 화면에 나오는 이미지들을 요청해서 불러오게 되는데 이러한것들을 하는 방법에 대해서 배움. 기본적으로 로컬 이미지에 대해서 그리고 리모트 이미지에 대해서 위와같은 기능을 구현하는 방법이 다른데 그 두가지 방법에 대해서 배웠다.

    ch17. Cloudflare Stream / 실시간 라이브 동영상 서비스를 streams에 적용하고, 해당 썸네일을 stream 리스트에 적용시키는 방법 및 라이브 스트리밍에 관한 전반적인 작업들.

    ch18. 코드챌린지 / 상품 상세페이지에 있는 talk to the seller 버튼을 누르면 판매자와 바로 채팅을 할 수 있는 기능을 구현해보기.

    ch19. NextJS에 대해서 더 깊게 공부하기.

    ch20. Incremental Site Regeneration / 어떻게 하면 조금 더 다양한 방법으로 웹을 만들 수 있는지, csr 이나 ssr을 사용하면서 어떻게 개발을 할 수 있는지, 그 외 어떤 방법으로 우리가 만든 페이지들을 유저에게 보다 더 좋게 보여줄 수 있는지, 지금까지 배운것들에서 조금 더 확장해서 배워볼 수 있었다.

    ch21. 

    ch22. 

~~~~~~~~~~~~
