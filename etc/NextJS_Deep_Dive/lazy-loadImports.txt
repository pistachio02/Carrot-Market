~~~~~~~~~~~~

    이전엔 dynamic imports가 어떨때 좋은지 알아봤다.
    그렇다면 이번엔 만약 어떠한 이유로든 dynamic imports가 너무 무거워서 불러오는데 오래 걸린다면?
    이러한 문제를 만나게 된다면 어떻게 해야하는지 알아보자.

    /*
        import dynamic from "next/dynamic";

        const ComponentWeWannaUse = dynamic( () => import(`/${우리가 사용하고싶은 컴포넌트의 위치}`) )

    */

    위와같이 사용한다고 말했었는데 한가지 알고 넘어가야 하는점은 dynamic함수는 인자로 2가지를 받는다.
    첫째는 함수, 둘째는 옵션.

    만약 저 ComponentWeWannaUse를 불러오는데 너무 오래걸린다면 불러오는 동안엔 유저가 아무런 화면도 볼 수 없게 되는데 이럴때 우리는 옵션을 활용해 유저가 대신 보고있을 수 있는 무언가를 설정해줄 수 있다. 아래와 같다.

    /*
        import dynamic from "next/dynamic";

        const ComponentWeWannaUse = dynamic(
            () => import(`/${우리가 사용하고싶은 컴포넌트의 위치}`),
            {
                loading: () => <span>Loading a Big Component For You, Please wait For A Min..!</span>,
            }
        )

    */

    위에를 보면 설명했듯이 첫번째로 실제 import할 함수를 인자로 받고,
    두번째로 옵션을 설정할 수 있는데, 이 때 이 옵션에다가 loading이라는 설정을 해주고 span 태그를 리턴시키는 함수를 작성해주면,
    유저는 실제 유저가 필요한, 봐야하는, 불러오기 오래걸리는 커다란 컴포넌트를 불러오기 전에 우리가 설정해준 저 span태그를 먼저 보고있게 되는것이다.

    물론 실제 코드를 짤때 불러오기 오래 걸리는 엄청나게 큰 컴포넌트를 만들게 되는 경우는 거의 없겠지만(애초에 그렇게 불러오기 오래걸리는 엄청나게 큰 컴포넌트를 만든것부터가 좋지 않은 코드를 작성했다는 의미이므로),
    위 방법을 알고있으면 나중에 혹시라도 생길 그러한 경우를 위해 대비책이 있다는것이니 도움이 될것이다.

~~~~~~~~~~~~

    위와같은 기능을 할 수 있는 다른 방법이 있다.
    바로 리액트18의 suspense 태그이다.
    사용법은 아래와 같다.

    /*
        import dynamic from "next/dynamic";

        const ComponentWeWannaUse = dynamic(
            () => import(`/${우리가 사용하고싶은 컴포넌트의 위치}`),
            {
                suspense: true,
            }
        )

        실제 컴포넌트가 위치해있는곳에다가 아래와같이 Suspense 태그를 넣어주면 된다.

        <Suspense fallback={<button>loading!!</button>}>
            <실제컴포넌트 />
        </Suspense>

    */

    위를 보면 기존에 loading이라고 설정해줬던 부분에다가 loading이 아니라 suspense: true로 해주고,
    실제 컴포넌트가 있어야 하는 위치에다가 Suspense 태그를 만들어주고, 그 안에다가 실제 컴포넌트를 넣어주고,
    Suspense 태그의 fallback에다가 우리가 유저에게 로딩이 되는동안 보여주고 싶은 모습을 코드로 작성하면 된다.
    이는 텍스트(문장)가 될수도 있고, 위와같이 태그가 될수도 있다.

    실제로 강의에선 이 리액트18의 Suspense를 사용하는 방법을 권장하는 이유가,
    컴포넌트는 컴포넌트끼리 있어야 좋다 라는 생각때문이라고 한다.
    lazy-loadImports도 물론 똑같은 기능을 할 수 있지만 이 방법을 사용하게 되면 보여주고 싶은 화면을 만든 태그들을 실제 태그의 위치와 다른곳에 둬야 하기 떄문에 좋지 않다고 볼 수 있다.
    
    아무튼 위 2가지 방법 모두 알고있으면 유용할것이다.

~~~~~~~~~~~~