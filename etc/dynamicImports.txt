~~~~~~~~~~~~

    DynamicImports?

    DynamicImports가 뭔지 알기 전에 일단 간단히 설명부터 하자.

    우리는 앱/웹을 개발할때 여러가지 기능을 수행할 수 있는 컴포넌트들을 따로 분리시켜서 각각 작성을 해주고 필요시마다 불러와서 사용하는데,
    이 때 import를 많이 사용하게 된다.
    import는 우리가 미리 만들어둔 컴포넌트들을 불러와서 사용할 수 있게 해주는데,
    생각해보면 우리가 엄청나게 많은 컴포넌트들을 만들고 그리고 그 많은 컴포넌트들을 불러와서 사용하게 된다면,
    유저는 그 많은 자바스립트를 다 다운받아서 가지고 있게 된다.
    그러니까 그 많은 코드들이 유저의 브라우저에 다운로드 되게 작성되어 있다는 의미다.

    이러한점이 안좋은 이유는 너무 많은 import들을 하게 되면 페이지 로딩이 길어질수도 있기 때문이다.
    어떠한 컴포넌트들은 화면에 항상 있는게 아니라 유저가 필요에 의해 어떠한 버튼을 눌렀을때 나오도록 작성된 코드들도 있을테고,
    항상 나타나야 하는게 아니라 어떤 특정한 상황에서만 나타나도록 작성된 코드들도 있을텐데,
    import를 해놓으면 그러한 특정한 상황이 아니더라도 그 코드들은 항상 다운로드 되게 되어있는것이다.

    즉 유저가 페이지를 막 다니면서 사용할때 나타나지 않을수도 있는 컴포넌트들조차 항상 다 다운받게 된다는 의미이다.
    그러면 위에도 설명했듯 로딩이 길어질수도 있는데, 이럴때 DynamicImports가 유용하다.

    DynamicImports는 처음부터 그러한 컴포넌트들을 다 다운받는게 아니라 정말로 필요하다고 판단되는 순간에만 코드들을 다운받아서 나타내게 된다.
    즉 유저가 어떠한 버튼을 눌러야만 나타나는 컴포넌트는 처음부터 그 모든 코드들을 다운받아 가지고 있는게 아니라 유저가 정말 그 버튼을 눌렀을때에만 다운받아서 나타내도록 할 수 있게 도와준다.

    사용법은 아래와 같다.

    /*
        import dynamic from "next/dynamic";

        const ComponentWeWannaUse = dynamic( () => import(`/${우리가 사용하고싶은 컴포넌트의 위치}`) )

    */

    이런식으로 사용할 수가 있겠다.

    DynamicImports가 좋은 또 하나의 이유는 일반적으로 보통 import해서 불러온 컴포넌트를 사용하듯이 DynamicImports도 똑같이 사용 가능하다는점이다. 예를들어 className을 정해준다던가 하는 기타 여러가지 작업들은 일반적으로 한던대로 할 수 있다는점이 장점 중 하나이다.

~~~~~~~~~~~~

    DynamicImports는 보통 코드를 다 작성하고 마지막에 최적화 작업에서 해주면 좋다.
    처음부터 DynamicImports를 고려해 코드를 작성하게 되면 타입스크립트에서 제공하는 자동완성 기능을 사용할 수 없게 될 뿐더러,
    작업을 해가면서 변경되는 많은 부분들에 영향을 받기 때문에 추천하지 않는다.
    코드를 다 작성하고 제일 마지막 코드 최적화 단계에서 DynamicImports를 어디에 적용하는게 좋을지 고민해가면서 적용시켜주면 좋다.

~~~~~~~~~~~~
